@model Progetto.ViewModels.acquistopiantaViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Nuovo ordine</h2>
<p style="font-size:14px; color:firebrick;">Per ordinare una pianta, inoltre a fare il login, è necessario registrarsi come paesaggista!</p>

@using (Html.BeginForm("Create", "ordini"))
{
    <div class="form-group">
        @Html.LabelFor(m => m.ordine.termine)
        @Html.TextBoxFor(m => m.ordine.termine, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ordine.termine)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ordine.latitudine)
        @Html.TextBoxFor(m => m.ordine.latitudine, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ordine.latitudine)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ordine.longitudine)
        @Html.TextBoxFor(m => m.ordine.longitudine, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ordine.longitudine)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ordine.piantaId)
        @Html.DropDownListFor(m => m.ordine.piantaId, new SelectList(Model.Piante, "Id", "nome"), "Seleziona pianta", new { @class = "form-control" }) <!--l'oggetto new acconcia il textbox '-->
        @Html.ValidationMessageFor(m => m.ordine.piantaId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ordine.paesaggistaId)
        @Html.TextBoxFor(m => m.ordine.paesaggistaId, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.ordine.paesaggistaId)
    </div>

    @Html.AntiForgeryToken();
    <!--per evitare attacchi cross-site request forgery: creando un token e salvandolo come cookie nel computer dell'utente. quando utente fa una richiesta, se token(hidden field)
        e cookie corrispondono ==> richiesta a buon fine-->
    <button type="submit" class="btn btn-primary">ordina</button>
}


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>


@section scripts
{
    @Scripts.Render("~/bundles/jqueryval") <!--per evitare round trip validation-->

}



<br />
<br />
<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 400px;
        width: 800px;
    }
</style>


<div class="row">
    <div id="map"></div>
    <script>
        function initMap() {
            const myLatlng = { lat: 44.764921, lng: 10.311887 };
            const map = new google.maps.Map(document.getElementById('map'), {
                center: myLatlng,
                zoom: 8
            });

            // Create the initial InfoWindow.
            let infoWindow = new google.maps.InfoWindow({
                content: "Click the map to get Lat/Lng!",
                position: myLatlng,
            });

            infoWindow.open(map);

            // Configure the click listener.
            map.addListener("click", (mapsMouseEvent) => {
                // Close the current InfoWindow.
                infoWindow.close();

                // Create a new InfoWindow.
                infoWindow = new google.maps.InfoWindow({
                    position: mapsMouseEvent.latLng,
                });
                infoWindow.setContent(
                    JSON.stringify(mapsMouseEvent.latLng.toJSON(), null, 2)
                );
                infoWindow.open(map);
            });

        }
    </script>

    <script>
        declare global {
            interface Window {
                initMap: () => void;
            }
        }
        window.initMap = initMap;
        export { };
    </script>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <link rel="stylesheet" type="text/css" href="./style.css" />
    <script type="module" src="./index.ts"></script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCGj6xoxrsqKTynjc4XDYEk2VOXf226eKE&callback=initMap"
            async defer></script>

</div>
<br />
<br />
